AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Caller Verification Stack for Conversation Relay

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  DynamoDBTable:
    Type: String
    Description: DynamoDB table name
  OpenAIApiKey:
    Type: String
    Description: OpenAI API Key
    NoEcho: true
  TwilioAccountSid:
    Type: String
    Description: Twilio Account SID
    NoEcho: true
  TwilioAuthToken:
    Type: String
    Description: Twilio Auth Token
    NoEcho: true

Globals:
  Function:
    Runtime: nodejs18.x
    Architectures:
      - arm64
    Timeout: 30
    MemorySize: 256
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref DynamoDBTable
        OPENAI_API_KEY: !Ref OpenAIApiKey
        TWILIO_ACCOUNT_SID: !Ref TwilioAccountSid
        TWILIO_AUTH_TOKEN: !Ref TwilioAuthToken
        WEBSOCKET_API: !Sub wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}

Resources:
  # API Gateway WebSocket API
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub cr-caller-verification-websocket-${Environment}
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  # WebSocket Stage
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: !Ref Environment
      AutoDeploy: true

  # WebSocket Routes
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Sub integrations/${ConnectInteg}

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Sub integrations/${DisconnectInteg}

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Sub integrations/${DefaultInteg}

  # WebSocket Integrations
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WsConnectFunction.Arn}/invocations

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WsDisconnectFunction.Arn}/invocations

  DefaultInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WsDefaultFunction.Arn}/invocations

  # Lambda Functions
  TwimlCallSetupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/twiml/call-setup/
      Handler: app.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:layer-cr-dynamodb-util:latest
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:layer-cr-twilio-client:latest
      Events:
        TwimlApi:
          Type: HttpApi
          Properties:
            Path: /twiml/call-setup
            Method: POST

  WsConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/websocket/connect/
      Handler: app.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:layer-cr-dynamodb-util:latest

  WsDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/websocket/disconnect/
      Handler: app.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:layer-cr-dynamodb-util:latest

  WsDefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/websocket/default/
      Handler: app.handler
      MemorySize: 1024
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:layer-cr-dynamodb-util:latest
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:layer-cr-open-ai-client:latest
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:layer-save-tool-result:latest

  GetCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/util/get-customer/
      Handler: app.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:layer-cr-dynamodb-util:latest

  VerifySendFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/util/verify-send/
      Handler: app.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:layer-cr-dynamodb-util:latest
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:layer-cr-twilio-client:latest

  VerifyCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/util/verify-code/
      Handler: app.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:layer-cr-dynamodb-util:latest

  LiveAgentHandoffFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/util/live-agent-handoff/
      Handler: app.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:layer-cr-dynamodb-util:latest
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:layer-cr-twilio-client:latest

  # Lambda Permissions for WebSocket API
  WsConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WsConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/CONNECT

  WsDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WsDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/DISCONNECT

  WsDefaultPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WsDefaultFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/$default

Outputs:
  WebSocketApiEndpoint:
    Description: WebSocket API Endpoint
    Value: !Sub wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}

  TwimlCallSetupUrl:
    Description: URL for TwiML Call Setup endpoint
    Value: !Sub https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/twiml/call-setup
